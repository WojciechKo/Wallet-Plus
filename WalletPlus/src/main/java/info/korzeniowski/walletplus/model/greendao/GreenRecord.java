package info.korzeniowski.walletplus.model.greendao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table Record.
 */
public class GreenRecord {

    private Long id;
    private float amount;
    private long categoryId;
    private String description;
    /** Not-null value. */
    private java.util.Date dateTime;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GreenRecordDao myDao;

    private GreenCategory greenCategory;
    private Long greenCategory__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public GreenRecord() {
    }

    public GreenRecord(Long id) {
        this.id = id;
    }

    public GreenRecord(Long id, float amount, long categoryId, String description, java.util.Date dateTime) {
        this.id = id;
        this.amount = amount;
        this.categoryId = categoryId;
        this.description = description;
        this.dateTime = dateTime;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGreenRecordDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public float getAmount() {
        return amount;
    }

    public void setAmount(float amount) {
        this.amount = amount;
    }

    public long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(long categoryId) {
        this.categoryId = categoryId;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    /** Not-null value. */
    public java.util.Date getDateTime() {
        return dateTime;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDateTime(java.util.Date dateTime) {
        this.dateTime = dateTime;
    }

    /** To-one relationship, resolved on first access. */
    public GreenCategory getGreenCategory() {
        long __key = this.categoryId;
        if (greenCategory__resolvedKey == null || !greenCategory__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GreenCategoryDao targetDao = daoSession.getGreenCategoryDao();
            GreenCategory greenCategoryNew = targetDao.load(__key);
            synchronized (this) {
                greenCategory = greenCategoryNew;
            	greenCategory__resolvedKey = __key;
            }
        }
        return greenCategory;
    }

    public void setGreenCategory(GreenCategory greenCategory) {
        if (greenCategory == null) {
            throw new DaoException("To-one property 'categoryId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.greenCategory = greenCategory;
            categoryId = greenCategory.getId();
            greenCategory__resolvedKey = categoryId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}

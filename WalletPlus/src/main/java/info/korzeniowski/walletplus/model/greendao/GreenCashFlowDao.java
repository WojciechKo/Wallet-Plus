package info.korzeniowski.walletplus.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CashFlow.
*/
public class GreenCashFlowDao extends AbstractDao<GreenCashFlow, Long> {

    public static final String TABLENAME = "CashFlow";

    /**
     * Properties of entity GreenCashFlow.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FromWalletId = new Property(1, Long.class, "fromWalletId", false, "FROM_WALLET_ID");
        public final static Property ToWalletId = new Property(2, Long.class, "toWalletId", false, "TO_WALLET_ID");
        public final static Property Amount = new Property(3, float.class, "amount", false, "AMOUNT");
        public final static Property CategoryId = new Property(4, long.class, "categoryId", false, "CATEGORY_ID");
        public final static Property Comment = new Property(5, String.class, "comment", false, "COMMENT");
        public final static Property DateTime = new Property(6, java.util.Date.class, "dateTime", false, "DATE_TIME");
    };

    private DaoSession daoSession;


    public GreenCashFlowDao(DaoConfig config) {
        super(config);
    }
    
    public GreenCashFlowDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CashFlow' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'FROM_WALLET_ID' INTEGER," + // 1: fromWalletId
                "'TO_WALLET_ID' INTEGER," + // 2: toWalletId
                "'AMOUNT' REAL NOT NULL ," + // 3: amount
                "'CATEGORY_ID' INTEGER NOT NULL ," + // 4: categoryId
                "'COMMENT' TEXT," + // 5: comment
                "'DATE_TIME' INTEGER NOT NULL );"); // 6: dateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CashFlow'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GreenCashFlow entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long fromWalletId = entity.getFromWalletId();
        if (fromWalletId != null) {
            stmt.bindLong(2, fromWalletId);
        }
 
        Long toWalletId = entity.getToWalletId();
        if (toWalletId != null) {
            stmt.bindLong(3, toWalletId);
        }
        stmt.bindDouble(4, entity.getAmount());
        stmt.bindLong(5, entity.getCategoryId());
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(6, comment);
        }
        stmt.bindLong(7, entity.getDateTime().getTime());
    }

    @Override
    protected void attachEntity(GreenCashFlow entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GreenCashFlow readEntity(Cursor cursor, int offset) {
        GreenCashFlow entity = new GreenCashFlow( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // fromWalletId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // toWalletId
            cursor.getFloat(offset + 3), // amount
            cursor.getLong(offset + 4), // categoryId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // comment
            new java.util.Date(cursor.getLong(offset + 6)) // dateTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GreenCashFlow entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFromWalletId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setToWalletId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setAmount(cursor.getFloat(offset + 3));
        entity.setCategoryId(cursor.getLong(offset + 4));
        entity.setComment(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDateTime(new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GreenCashFlow entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GreenCashFlow entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGreenCategoryDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getGreenWalletDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getGreenWalletDao().getAllColumns());
            builder.append(" FROM CashFlow T");
            builder.append(" LEFT JOIN Category T0 ON T.'CATEGORY_ID'=T0.'_id'");
            builder.append(" LEFT JOIN Wallet T1 ON T.'FROM_WALLET_ID'=T1.'_id'");
            builder.append(" LEFT JOIN Wallet T2 ON T.'TO_WALLET_ID'=T2.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected GreenCashFlow loadCurrentDeep(Cursor cursor, boolean lock) {
        GreenCashFlow entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        GreenCategory greenCategory = loadCurrentOther(daoSession.getGreenCategoryDao(), cursor, offset);
         if(greenCategory != null) {
            entity.setGreenCategory(greenCategory);
        }
        offset += daoSession.getGreenCategoryDao().getAllColumns().length;

        GreenWallet fromGreenWallet = loadCurrentOther(daoSession.getGreenWalletDao(), cursor, offset);
        entity.setFromGreenWallet(fromGreenWallet);
        offset += daoSession.getGreenWalletDao().getAllColumns().length;

        GreenWallet toGreenWallet = loadCurrentOther(daoSession.getGreenWalletDao(), cursor, offset);
        entity.setToGreenWallet(toGreenWallet);

        return entity;    
    }

    public GreenCashFlow loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<GreenCashFlow> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<GreenCashFlow> list = new ArrayList<GreenCashFlow>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<GreenCashFlow> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<GreenCashFlow> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

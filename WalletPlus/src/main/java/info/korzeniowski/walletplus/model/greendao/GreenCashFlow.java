package info.korzeniowski.walletplus.model.greendao;

import info.korzeniowski.walletplus.model.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import info.korzeniowski.walletplus.model.CashFlow;
// KEEP INCLUDES END
/**
 * Entity mapped to table CashFlow.
 */
public class GreenCashFlow {

    private Long id;
    private Long fromWalletId;
    private Long toWalletId;
    private float amount;
    private long categoryId;
    private String comment;
    /** Not-null value. */
    private java.util.Date dateTime;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GreenCashFlowDao myDao;

    private GreenCategory greenCategory;
    private Long greenCategory__resolvedKey;

    private GreenWallet fromGreenWallet;
    private Long fromGreenWallet__resolvedKey;

    private GreenWallet toGreenWallet;
    private Long toGreenWallet__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public GreenCashFlow() {
    }

    public GreenCashFlow(Long id) {
        this.id = id;
    }

    public GreenCashFlow(Long id, Long fromWalletId, Long toWalletId, float amount, long categoryId, String comment, java.util.Date dateTime) {
        this.id = id;
        this.fromWalletId = fromWalletId;
        this.toWalletId = toWalletId;
        this.amount = amount;
        this.categoryId = categoryId;
        this.comment = comment;
        this.dateTime = dateTime;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGreenCashFlowDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getFromWalletId() {
        return fromWalletId;
    }

    public void setFromWalletId(Long fromWalletId) {
        this.fromWalletId = fromWalletId;
    }

    public Long getToWalletId() {
        return toWalletId;
    }

    public void setToWalletId(Long toWalletId) {
        this.toWalletId = toWalletId;
    }

    public float getAmount() {
        return amount;
    }

    public void setAmount(float amount) {
        this.amount = amount;
    }

    public long getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(long categoryId) {
        this.categoryId = categoryId;
    }

    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    /** Not-null value. */
    public java.util.Date getDateTime() {
        return dateTime;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setDateTime(java.util.Date dateTime) {
        this.dateTime = dateTime;
    }

    /** To-one relationship, resolved on first access. */
    public GreenCategory getGreenCategory() {
        long __key = this.categoryId;
        if (greenCategory__resolvedKey == null || !greenCategory__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GreenCategoryDao targetDao = daoSession.getGreenCategoryDao();
            GreenCategory greenCategoryNew = targetDao.load(__key);
            synchronized (this) {
                greenCategory = greenCategoryNew;
            	greenCategory__resolvedKey = __key;
            }
        }
        return greenCategory;
    }

    public void setGreenCategory(GreenCategory greenCategory) {
        if (greenCategory == null) {
            throw new DaoException("To-one property 'categoryId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.greenCategory = greenCategory;
            categoryId = greenCategory.getId();
            greenCategory__resolvedKey = categoryId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public GreenWallet getFromGreenWallet() {
        Long __key = this.fromWalletId;
        if (fromGreenWallet__resolvedKey == null || !fromGreenWallet__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GreenWalletDao targetDao = daoSession.getGreenWalletDao();
            GreenWallet fromGreenWalletNew = targetDao.load(__key);
            synchronized (this) {
                fromGreenWallet = fromGreenWalletNew;
            	fromGreenWallet__resolvedKey = __key;
            }
        }
        return fromGreenWallet;
    }

    public void setFromGreenWallet(GreenWallet fromGreenWallet) {
        synchronized (this) {
            this.fromGreenWallet = fromGreenWallet;
            fromWalletId = fromGreenWallet == null ? null : fromGreenWallet.getId();
            fromGreenWallet__resolvedKey = fromWalletId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public GreenWallet getToGreenWallet() {
        Long __key = this.toWalletId;
        if (toGreenWallet__resolvedKey == null || !toGreenWallet__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GreenWalletDao targetDao = daoSession.getGreenWalletDao();
            GreenWallet toGreenWalletNew = targetDao.load(__key);
            synchronized (this) {
                toGreenWallet = toGreenWalletNew;
            	toGreenWallet__resolvedKey = __key;
            }
        }
        return toGreenWallet;
    }

    public void setToGreenWallet(GreenWallet toGreenWallet) {
        synchronized (this) {
            this.toGreenWallet = toGreenWallet;
            toWalletId = toGreenWallet == null ? null : toGreenWallet.getId();
            toGreenWallet__resolvedKey = toWalletId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    public GreenCashFlow(CashFlow cashFlow) {
        setId(cashFlow.getId());
        setAmount(cashFlow.getAmount());
        setCategoryId(cashFlow.getCategoryId());
        setComment(cashFlow.getComment());
        setDateTime(cashFlow.getDateTime());
    }
    public static CashFlow toCashFlow(GreenCashFlow greenCashFlow) {
        CashFlow cashFlow= new CashFlow();
        cashFlow.setId(greenCashFlow.getId());
        cashFlow.setAmount(greenCashFlow.getAmount());
        cashFlow.setCategoryId(greenCashFlow.getCategoryId());
        cashFlow.setComment(greenCashFlow.getComment());
        cashFlow.setDateTime(greenCashFlow.getDateTime());
        return cashFlow;
    }
    // KEEP METHODS END

}

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.0'
        classpath "com.neenbedankt.gradle.plugins:android-apt:1.4"
        classpath "org.robolectric:robolectric-gradle-plugin:0.13.2"
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'robolectric'

apt {
    arguments {
        androidManifestFile variant.outputs[0].processResources.manifestFile
        resourcePackageName android.defaultConfig.applicationId
    }
}

android {
    compileSdkVersion 21
    buildToolsVersion '21.1.1'

    defaultConfig {
        versionCode 12

        versionName "2.0"
        applicationId 'info.korzeniowski.walletplus'

        minSdkVersion 14
        targetSdkVersion 21
    }

    lintOptions {
        abortOnError false
        disable 'InvalidPackage'
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    sourceSets {
        androidTest.setRoot('src/androidTest')
    }

    signingConfigs {
        config {
            keyAlias signingKeyAlias
            storePassword signingStorePassword
            keyPassword signingKeyPassword
            storeFile file(signingStoreFile)
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.config
            applicationIdSuffix ".debug"
        }
        release {
            signingConfig signingConfigs.config
        }
    }
}

robolectric {
    include '**/*Test.class'
    exclude '**/espresso/**/*.class'
    maxHeapSize = "2048m"
}

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }

    // For SwipeListView
    maven { url 'http://clinker.47deg.com/nexus/content/groups/public' }
}

dependencies {
    // Android Support
    def androidSupportVersion = '21.0.+'
    compile "com.android.support:support-v4:$androidSupportVersion"
    compile "com.android.support:appcompat-v7:$androidSupportVersion"
    compile "com.android.support:cardview-v7:$androidSupportVersion"
    compile "com.android.support:recyclerview-v7:$androidSupportVersion"

    //Google Drive API
    compile 'com.google.android.gms:play-services:6.5.+'

    // OrmLite
    def ormLiteVersion = '4.48'
    compile "com.j256.ormlite:ormlite-android:$ormLiteVersion"
    compile "com.j256.ormlite:ormlite-core:$ormLiteVersion"

    // Butter Knife
    compile 'com.jakewharton:butterknife:5.1.2'

    // Dagger
    def daggerVersion = '1.2.+'
    apt "com.squareup.dagger:dagger-compiler:$daggerVersion"
    androidTestCompile "com.squareup.dagger:dagger-compiler:$daggerVersion"
    compile "com.squareup.dagger:dagger:$daggerVersion"

    // Otto
    compile 'com.squareup:otto:1.3.5'

    // Guava
    compile 'com.google.guava:guava:18.0'

    // Joda time android
    compile 'net.danlew:android.joda:2.5.0'

    // PagerSlidingTabStrip
    compile 'com.astuetz:pagerslidingtabstrip:1.0.1'

    // FButton
    compile 'info.hoang8f:fbutton:1.0.5'

    // SwipeListView
    compile('com.fortysevendeg.swipelistview:swipelistview:1.0-SNAPSHOT@aar') {
        transitive = true
    }

    // JUnit
    androidTestCompile 'junit:junit:4.11'

    // Mockito
    androidTestCompile 'org.mockito:mockito-core:1.9.5'

    // Robolectric
    androidTestCompile('org.robolectric:robolectric:2.4') {
        exclude module: 'classworlds'
        exclude module: 'maven-artifact'
        exclude module: 'maven-artifact-manager'
        exclude module: 'maven-error-diagnostics'
        exclude module: 'maven-model'
        exclude module: 'maven-plugin-registry'
        exclude module: 'maven-profile'
        exclude module: 'maven-project'
        exclude module: 'maven-settings'
        exclude module: 'nekohtml'
        exclude module: 'plexus-container-default'
        exclude module: 'plexus-interpolation'
        exclude module: 'plexus-utils'
        exclude module: 'wagon-file'
        exclude module: 'wagon-http-lightweight'
        exclude module: 'wagon-http-shared'
        exclude module: 'wagon-provider-api'
    }

    //Fest Android
    androidTestCompile 'com.squareup:fest-android:1.0.8'
}

apply plugin: "jacoco"

jacoco {
    toolVersion = "0.7.1.201405082137"
}
// Define coverage source.
// If you have rs/aidl etc... add them here.
def coverageSourceDirs = [
        'src/main/java',
        'src/gen'
]

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebug") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = false
        html.enabled = true
    }
    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            includes: [
                    '**/info/korzeniowski/walletplus/ui/**',
                    '**/info/korzeniowski/walletplus/service/**'],
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class'
            ])
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('build/jacoco/testDebug.exec')

    def renamedFilesMap = [:]

    // Hacky fix for issue: https://code.google.com/p/android/issues/detail?id=69174.
    // Rename files with '$$' before generating report, and then rename back after
    doFirst {
        new File('WalletPlus/build/intermediates/classes/').eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                def oldPath = file.path
                def newPath = oldPath.replace('$$', '$')
                file.renameTo(newPath)
                renamedFilesMap[newPath] = oldPath
            }
        }
    }
    doLast {
        renamedFilesMap.each() {
            newPath, oldPath ->
                new File(newPath).renameTo(oldPath)
        }
    }
}

apply plugin: 'idea'

idea {
    module {
        downloadSources = true
    }
}
